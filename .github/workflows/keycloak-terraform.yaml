name: Keycloak Terraform
on:
  pull_request:
    types: [ labeled ]
    paths:
      - 'terraform/applications/keycloak/**'
jobs:
  terraform-automate:
    if: contains(github.event.pull_request.labels.*.name, 'kc-client')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: set dev env variable        
        if: contains(github.event.pull_request.labels.*.name, 'dev')      
        run: |
           echo "KC_ENV=dev" >> "$GITHUB_ENV"
      
      - name: set staging env variable        
        if: contains(github.event.pull_request.labels.*.name, 'staging')      
        run: |
           echo "KC_ENV=staging" >> "$GITHUB_ENV"

      # - name: Obtain GitHub Token
      #   uses: marvinpinto/action-inject-ssm-secrets@latest
      #   with:
      #     ssm_parameter: /dsva-vagov/keycloak/rp_github_token #/devops/VA_VSP_BOT_GITHUB_TOKEN
      #     env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: echo stuff
        run: |
            echo ${{ env.KC_ENV }} 

      - name: terraform fmt
        id: fmt-dev
        if: env.KC_ENV == 'dev'
        working-directory: terraform/applications/keycloak
        continue-on-error: true
        run: make ENV=dev fmt-check

      - name: terraform init
        id: init-dev
        if: env.KC_ENV == 'dev'
        working-directory: terraform/applications/keycloak
        continue-on-error: true
        run: make ENV=dev init

      - uses: actions/github-script@0.9.0
        if: env.KC_ENV == 'dev'
        env:
          FMT: "${{ steps.fmt-dev.outputs.stdout }}"
          PLAN: "${{ steps.plan-dev.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GIT_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt-dev.outcome }}\`

            <details><summary>Files in need of format</summary>
            
            \`\`\`\n
            ${process.env.FMT}
            \`\`\`
            
            </details>

            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init-dev.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan-dev.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>

            #### *Environment: dev*`;
      
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: terraform fmt
        id: fmt-staging
        if: env.KC_ENV == 'staging'
        working-directory: terraform/applications/keycloak
        continue-on-error: true
        run: make ENV=staging fmt-check

      - name: terraform init
        id: init-staging
        if: env.KC_ENV == 'staging'
        working-directory: terraform/applications/keycloak
        continue-on-error: true
        run: make ENV=staging init

      - uses: actions/github-script@0.9.0
        if: env.KC_ENV == 'staging'
        env:
          FMT: "${{ steps.fmt-staging.outputs.stdout }}"
          # PLAN: "${{ steps.plan-staging.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GIT_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt-staging.outcome }}\`

            <details><summary>Files in need of format</summary>
            
            \`\`\`\n
            ${process.env.FMT}
            \`\`\`
            
            </details>

            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init-staging.outcome }}\`

            
            </details>

            #### *Environment: staging*`;
      
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })